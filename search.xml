<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>How to Cross Compile and Native Build on OpenBMC</title>
    <url>/2023/06/16/Cross-Compile-and-Native-Build-on-OpenBMC/</url>
    <content><![CDATA[<h1 id="Cross-Compile"><a href="#Cross-Compile" class="headerlink" title="Cross Compile"></a>Cross Compile</h1><p>To cross-compile on OpenBMC, follow these steps:</p>
<h2 id="Source-the-setup-script"><a href="#Source-the-setup-script" class="headerlink" title="Source the setup script"></a>Source the <code>setup</code> script</h2><p>Start by sourcing the <code>setup</code> script for your target hardware. You can find the script on the <a href="https://github.com/openbmc/openbmc#3-target-your-hardware">OpenBMC GitHub repository</a>. Execute the following command in your terminal:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. setup romulus</span><br></pre></td></tr></table></figure>

<h2 id="Build-the-SDK"><a href="#Build-the-SDK" class="headerlink" title="Build the SDK"></a>Build the SDK</h2><p>Next, build the Software Development Kit (SDK) using the <code>bitbake</code> command. Specify your target as an argument. For example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ bitbake -c populate_sdk obmc-phosphor-image</span><br></pre></td></tr></table></figure>

<h2 id="Install-the-SDK"><a href="#Install-the-SDK" class="headerlink" title="Install the SDK"></a>Install the SDK</h2><p>Once the SDK is built, you need to install it. Follow these steps:</p>
<ol>
<li><p>Create a folder where you want to install the SDK. For instance, let’s use <code>/usr/local/openbmc</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ sudo <span class="built_in">mkdir</span> /usr/local/openbmc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Navigate to the directory containing the SDK installation files.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ <span class="built_in">cd</span> ./tmp/deploy/sdk/</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the SDK installation script using the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ ./oecore-x86_64-armv7ahf-vfpv4d16-toolchain-nodistro.0.sh</span><br><span class="line">Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro) SDK installer version nodistro.0</span><br><span class="line">=============================================================================================</span><br></pre></td></tr></table></figure>
</li>
<li><p>The installation script will prompt you to enter the target directory for the SDK. Specify <code>/usr/local/openbmc</code> when prompted:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter target directory <span class="keyword">for</span> SDK (default: /usr/local/oecore-x86_64): /usr/local/openbmc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Confirm the installation by typing ‘y’ when asked if you want to proceed:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">You are about to install the SDK to <span class="string">&quot;/usr/local/openbmc&quot;</span>. Proceed [Y/n]? y</span><br><span class="line">Extracting SDK....................................................................................................................................<span class="keyword">done</span></span><br><span class="line">Setting it up...done</span><br><span class="line">SDK has been successfully <span class="built_in">set</span> up and is ready to be used.</span><br><span class="line">Each time you wish to use the SDK <span class="keyword">in</span> a new shell session, you need to <span class="built_in">source</span> the environment setup script e.g.</span><br></pre></td></tr></table></figure>
</li>
<li><p>The SDK will be extracted and set up in the specified directory.</p>
</li>
<li><p>Verify that the installation was successful by checking the contents of the installation directory:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ <span class="built_in">ls</span> -al /usr/local/openbmc/</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Using-the-SDK"><a href="#Using-the-SDK" class="headerlink" title="Using the SDK"></a>Using the SDK</h2><p>Before compiling your code, you need to set up the SDK environment. Execute the following command to source the environment setup script:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ . /usr/local/openbmc/environment-setup-armv7ahf-vfpv4d16-openbmc-linux-gnueabi</span><br></pre></td></tr></table></figure>

<h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><p>Now you’re ready to compile your code. Here’s an example of compiling a simple “hello” program:</p>
<ol>
<li><p>Create a directory for your project and navigate into it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ <span class="built_in">mkdir</span> hello</span><br><span class="line">albertlin@thinkbook:$ <span class="built_in">cd</span> hello</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a C source file named <code>hello.c</code> and a Meson build file named <code>meson.build</code> with the following content:</p>
<p><code>hello.c</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello OpenBMC\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>meson.build</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project(&#x27;hello&#x27;, &#x27;c&#x27;)</span><br><span class="line"></span><br><span class="line">executable(&#x27;hello&#x27;, &#x27;hello.c&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate the build files using Meson:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:hello$ meson build</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the project using Ninja:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:hello$ ninja -C build</span><br></pre></td></tr></table></figure>
</li>
<li><p>Once the build is complete, you can find the compiled binary in the <code>build</code> directory. You can copy it to your OpenBMC target for execution using the <code>scp</code> command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:hello$ scp build/hello root@192.168.0.196:/tmp</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Run-built-program-in-BMC"><a href="#Run-built-program-in-BMC" class="headerlink" title="Run built program in BMC"></a>Run built program in BMC</h2><p>To execute the binary on your BMC target, follow these steps:</p>
<ol>
<li><p>Connect to your BMC target using SSH.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.0.196</span><br></pre></td></tr></table></figure>
</li>
<li><p>Navigate to the directory where you copied the binary.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@romulus:/tmp<span class="comment"># cd /tmp</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the binary.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@romulus:/tmp<span class="comment"># ./hello</span></span><br><span class="line">Hello OpenBMC</span><br></pre></td></tr></table></figure></li>
</ol>
<p>That’s it! You have successfully cross-compiled and executed a program on OpenBMC.</p>
<h1 id="Native-Build"><a href="#Native-Build" class="headerlink" title="Native Build"></a>Native Build</h1><h2 id="Source-the-setup-script-1"><a href="#Source-the-setup-script-1" class="headerlink" title="Source the setup script"></a>Source the <code>setup</code> script</h2><p>Start by sourcing the <code>setup</code> script for your target hardware. You can find the script on the <a href="https://github.com/openbmc/openbmc#3-target-your-hardware">OpenBMC GitHub repository</a>. Execute the following command in your terminal:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. setup romulus</span><br></pre></td></tr></table></figure>
<h2 id="Environment-Setup-and-Checking"><a href="#Environment-Setup-and-Checking" class="headerlink" title="Environment Setup and Checking"></a>Environment Setup and Checking</h2><ol>
<li>Check if the required packages listed by <a href="https://github.com/openbmc/sdbusplus">sdbusplus</a> are installed:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git meson libtool pkg-config g++ libsystemd-dev \</span><br><span class="line">    python3 python3-pip python3-yaml python3-mako python3-inflection</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>Check the Boost version used by OpenBMC:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ bitbake-layers show-recipes | grep -i meson -A 1</span><br><span class="line">boost:</span><br><span class="line">  boost                 1.82.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>Ensure that the Boost version matches what OpenBMC currently use.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:boost$ wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz</span><br><span class="line">--2023-06-17 03:30:56--</span><br><span class="line">...</span><br><span class="line">2023-06-17 03:31:52 (2.52 MB/s) - ‘boost_1_82_0.tar.gz’ saved [142580547/142580547]</span><br><span class="line">albertlin@albertlin:boost$ <span class="built_in">ls</span></span><br><span class="line">boost_1_82_0.tar.gz</span><br><span class="line"></span><br><span class="line">albertlin@albertlin:boost_1_82_0$ ./bootstrap.sh --prefix=/usr</span><br><span class="line">Building B2 engine..</span><br><span class="line">...</span><br><span class="line">Further information:</span><br><span class="line"></span><br><span class="line">   - Command line <span class="built_in">help</span>:</span><br><span class="line">     ./b2 --<span class="built_in">help</span></span><br><span class="line">     </span><br><span class="line">   - Getting started guide: </span><br><span class="line">     http://www.boost.org/more/getting_started/unix-variants.html</span><br><span class="line">     </span><br><span class="line">   - B2 documentation:</span><br><span class="line">     http://www.boost.org/build/</span><br><span class="line"></span><br><span class="line">albertlin@albertlin:boost_1_82_0$ sudo ./b2 --install</span><br><span class="line">Performing configuration checks</span><br><span class="line">...</span><br><span class="line">The following directory should be added to linker library paths:</span><br><span class="line"></span><br><span class="line">    /home/albertlin/hypnoslin/openbmc/boost/boost_1_82_0/stage/lib</span><br><span class="line">albertlin@albertlin:sdbusplus$ <span class="built_in">cat</span> /usr/include/boost/version.hpp | grep <span class="string">&quot;BOOST_LIB_VERSION&quot;</span></span><br><span class="line">//  BOOST_LIB_VERSION must be defined to be the same as BOOST_VERSION</span><br><span class="line"><span class="comment">#define BOOST_LIB_VERSION &quot;1_82&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Check the Meson version used by OpenBMC:</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ bitbake-layers show-recipes | grep -i meson -A 1</span><br><span class="line">meson:</span><br><span class="line">  meta                 1.0.1</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Ensure that the Meson version matches what OpenBMC currently uses. It’s recommended to have an upgraded version:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:sdbusplus$ meson -v</span><br><span class="line">0.61.2</span><br><span class="line">albertlin@albertlin:sdbusplus$ python --version</span><br><span class="line">Python 3.10.6</span><br><span class="line">albertlin@albertlin:sdbusplus$ python -m pip install meson</span><br><span class="line">Defaulting to user installation because normal site-packages is not writeable</span><br><span class="line">Collecting meson</span><br><span class="line">  Downloading meson-1.1.1-py3-none-any.whl (918 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 918.4/918.4 KB 2.9 MB/s eta 0:00:00</span><br><span class="line">Installing collected packages: meson</span><br><span class="line">Successfully installed meson-1.1.1</span><br><span class="line">albertlin@thinkbook:~$ meson -v</span><br><span class="line">1.1.1</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>If there are missing packages reported by Meson while building, install them:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y libi2c-dev libarchive-dev libfmt-dev libsystemd-dev</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>Verify that the GCC&#x2F;G++ version matches what OpenBMC currently uses.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ bitbake-layers show-recipes | grep gcc -A 1</span><br><span class="line">gcc:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-cross-arm:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-cross-canadian-arm:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-crosssdk-x86_64-oesdk-linux:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-runtime:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-sanitizers:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-source-12.2.0:</span><br><span class="line">meta 12.2.0</span><br><span class="line">–</span><br><span class="line">libgcc:</span><br><span class="line">meta 12.2.0</span><br><span class="line">libgcc-initial:</span><br><span class="line">meta 12.2.0</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ gcc -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">...</span><br><span class="line">gcc version 11.3.0 (Ubuntu 11.3.0-1ubuntu1~22.04.1)</span><br></pre></td></tr></table></figure></li>
<li>Ensure that the g++ version matches what OpenBMC currently uses.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:~$ g++ -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=g++</span><br><span class="line">...</span><br><span class="line">gcc version 9.5.0 (Ubuntu 9.5.0-1ubuntu1~22.04) </span><br><span class="line">albertlin@albertlin:~$ sudo apt install g++-12</span><br><span class="line">Reading package lists... Done</span><br><span class="line">...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.10.2-1) ... </span><br><span class="line">albertlin@albertlin:~$ <span class="built_in">ls</span> -al /usr/bin/g++</span><br><span class="line">lrwxrwxrwx 1 root root 5 Mar 20  2020 /usr/bin/g++ -&gt; g++-9</span><br><span class="line">albertlin@albertlin:~$ sudo <span class="built_in">rm</span> /usr/bin/g++</span><br><span class="line">albertlin@albertlin:~$ sudo <span class="built_in">ln</span> /usr/bin/g++-12 /usr/bin/g++</span><br><span class="line">albertlin@albertlin:~$ g++ -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=g++</span><br><span class="line">...</span><br><span class="line">gcc version 12.1.0 (Ubuntu 12.1.0-2ubuntu1~22.04)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Building-and-Executing"><a href="#Building-and-Executing" class="headerlink" title="Building and Executing"></a>Building and Executing</h2><ol>
<li><p>Clone the sdbusplus repository. Run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openbmc/sdbusplus.git</span><br><span class="line"><span class="built_in">cd</span> sdbusplus</span><br></pre></td></tr></table></figure>
</li>
<li><p>Configure the build using Meson. Run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:sdbusplus$ meson build -Dtests=disabled -Dexamples=disabled</span><br><span class="line">The Meson build system</span><br><span class="line">Version: 1.1.1</span><br><span class="line">Source <span class="built_in">dir</span>: /home/albertlin/hypnoslin/openbmc/sdbusplus</span><br><span class="line">Build <span class="built_in">dir</span>: /home/albertlin/hypnoslin/openbmc/sdbusplus/build</span><br><span class="line">Build <span class="built_in">type</span>: native build</span><br><span class="line">Project name: sdbusplus</span><br><span class="line">Project version: 1.0.0</span><br><span class="line">C compiler <span class="keyword">for</span> the host machine: cc (gcc 11.3.0 <span class="string">&quot;cc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0&quot;</span>)</span><br><span class="line">C linker <span class="keyword">for</span> the host machine: cc ld.bfd 2.38</span><br><span class="line">C++ compiler <span class="keyword">for</span> the host machine: c++ (gcc 12.1.0 <span class="string">&quot;c++ (Ubuntu 12.1.0-2ubuntu1~22.04) 12.1.0&quot;</span>)</span><br><span class="line">C++ linker <span class="keyword">for</span> the host machine: c++ ld.bfd 2.38</span><br><span class="line">Host machine cpu family: x86_64</span><br><span class="line">Host machine cpu: x86_64</span><br><span class="line">Found pkg-config: /usr/bin/pkg-config (0.29.2)</span><br><span class="line">Run-time dependency libsystemd found: YES 249</span><br><span class="line">Program python3 (inflection, yaml, mako) found: YES (/usr/bin/python3) modules: inflection, yaml, mako</span><br><span class="line">Run-time dependency Boost found: YES 1.82.0 (/usr/include)</span><br><span class="line">Program sdbus++ found: YES (/home/albertlin/hypnoslin/openbmc/sdbusplus/tools/sdbus++)</span><br><span class="line">Program sdbus++ found: YES (overridden)</span><br><span class="line">Program sdbus++-gen-meson found: YES (/home/albertlin/hypnoslin/openbmc/sdbusplus/tools/sdbus++-gen-meson)</span><br><span class="line">Program sdbus++-gen-meson found: YES (overridden)</span><br><span class="line">Build targets <span class="keyword">in</span> project: 1</span><br><span class="line"></span><br><span class="line">sdbusplus 1.0.0</span><br><span class="line"></span><br><span class="line">  User defined options</span><br><span class="line">    examples: disabled</span><br><span class="line">    tests   : disabled</span><br><span class="line"></span><br><span class="line">Found ninja-1.10.1 at /usr/bin/ninja</span><br><span class="line">WARNING: Running the setup <span class="built_in">command</span> as `meson [options]` instead of `meson setup [options]` is ambiguous and deprecated.</span><br></pre></td></tr></table></figure></li>
<li><p>Build the project using Ninja. Run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:sdbusplus$ ninja -C build</span><br><span class="line">ninja: Entering directory `build<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[11/11] Linking target libsdbusplus.so.1.0.0</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>OpenBMC</category>
      </categories>
      <tags>
        <tag>OpenBMC</tag>
      </tags>
  </entry>
  <entry>
    <title>Testing OpenBMC WebUI Performance with Sitespeed.io</title>
    <url>/2023/06/18/How-to-test-performance-of-webui-vue-of-OpenBMC/</url>
    <content><![CDATA[<p>OpenBMC utilizes <a href="https://github.com/openbmc/webui-vue">webui-vue</a> as its front-end, which is a single-page application (SPA). Testing the web performance of SPAs can be challenging with traditional tools like Lighthouse, which are typically used for testing static websites. However, Sitespeed.io provides mechanisms to test SPAs, making it a suitable choice for testing the OpenBMC web pages.</p>
<h1 id="Sitespeed-io"><a href="#Sitespeed-io" class="headerlink" title="Sitespeed.io"></a>Sitespeed.io</h1><p>Sitespeed.io is a powerful tool that allows you to perform web performance testing on SPAs. It offers the ability to measure various performance metrics and provides detailed insights into the performance of your web application.</p>
<h2 id="Writing-a-Testing-Script"><a href="#Writing-a-Testing-Script" class="headerlink" title="Writing a Testing Script"></a>Writing a Testing Script</h2><p>To demonstrate the performance testing of the OpenBMC <a href="https://github.com/openbmc/webui-vue">webui-vue</a> login process, we can refer to the example provided by Sitespeed.io for testing SPAs. You can find the example performance test script for Grafana <a href="https://www.sitespeed.io/documentation/sitespeed.io/spa/#example-performance-test-grafana">here</a>. Additionally, the Sitespeed.io documentation provides more information on scripting and available APIs, which you can find <a href="https://www.sitespeed.io/documentation/sitespeed.io/scripting/">here</a>.</p>
<p>For this article, let’s focus on testing the performance of the OpenBMC login process using the provided script <code>openbmc.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">context, commands</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> commands.<span class="property">measure</span>.<span class="title function_">start</span>(<span class="string">&#x27;https://192.168.0.196/#/login&#x27;</span>, <span class="string">&#x27;login page&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> commands.<span class="property">addText</span>.<span class="title function_">byId</span>(<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> commands.<span class="property">addText</span>.<span class="title function_">byId</span>(<span class="string">&#x27;0penBmc&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the measurement and give it the alias &#x27;login&#x27;</span></span><br><span class="line">        <span class="comment">// The alias will be used when the metrics are sent to</span></span><br><span class="line">        <span class="comment">// Graphite/InfluxDB</span></span><br><span class="line">        <span class="keyword">await</span> commands.<span class="property">measure</span>.<span class="title function_">start</span>(<span class="string">&#x27;login to dashboard&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find the submit button, click it, and wait for the </span></span><br><span class="line">        <span class="comment">// page load to complete on the next loaded URL </span></span><br><span class="line">        <span class="keyword">await</span> commands.<span class="property">click</span>.<span class="title function_">byXpath</span>(<span class="string">&#x27;//*[@id=&quot;app&quot;]/main/div/div[1]/div/form/button&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> commands.<span class="title function_">navigate</span>(<span class="string">&#x27;https://192.168.0.196/#/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stop and collect the metrics</span></span><br><span class="line">        <span class="keyword">return</span> commands.<span class="property">measure</span>.<span class="title function_">stop</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// If the GUI changes and a link is not there,</span></span><br><span class="line">        <span class="comment">// the click commands will throw an error.</span></span><br><span class="line">        <span class="comment">// sitespeed.io will catch, log, and rethrow</span></span><br><span class="line">        <span class="comment">// and you can choose to handle the error</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Make sure to adjust the URLs and element selectors in the script to match your OpenBMC setup.</p>
<p>With this script, you can measure the performance of the OpenBMC login process using Sitespeed.io. It captures metrics such as page load time, resource timings, and other performance-related data.</p>
<h2 id="Running-the-Performance-Test"><a href="#Running-the-Performance-Test" class="headerlink" title="Running the Performance Test"></a>Running the Performance Test</h2><p>To run the performance test on the OpenBMC web pages using the <code>openbmc.js</code> script, you can execute the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -v <span class="string">&quot;<span class="subst">$(pwd)</span>:/sitespeed.io&quot;</span> sitespeedio/sitespeed.io:27.3.0 openbmc.js --spa --multi -n 1</span><br></pre></td></tr></table></figure>

<p>In this command, the <code>--spa</code> flag indicates that the web page being tested is a single-page application, while the <code>--multi</code> flag enables multiple iterations of the test. The <code>-n 1</code> argument determines the number of testing iterations to perform. Adjust the value of <code>-n</code> as per your requirements.</p>
<p>For more information on how to customize and extend the performance test, you can refer to the example provided by Sitespeed.io for testing SPAs <a href="https://www.sitespeed.io/documentation/sitespeed.io/spa/#example-performance-test-grafana">here</a>.</p>
<h2 id="Video-Recording"><a href="#Video-Recording" class="headerlink" title="Video Recording"></a>Video Recording</h2><p>If you want to have a video recording of the script’s interaction during the performance test, you can specify the <code>--browsertime.videoParams.debug</code> flag. This flag generates a video in the test report, allowing you to visualize the user flow and interactions. Here’s an example command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -v <span class="string">&quot;<span class="subst">$(pwd)</span>:/sitespeed.io&quot;</span> sitespeedio/sitespeed.io:27.3.0 openbmc.js --spa --multi --browsertime.videoParams.debug</span><br></pre></td></tr></table></figure>

<p>Make sure to adjust the command and script parameters based on your specific requirements and OpenBMC setup.</p>
<p>By running these commands, you can perform performance testing on the OpenBMC web pages using Sitespeed.io, generate performance metrics, and optionally capture a video recording of the user interaction.</p>
<h2 id="Viewing-the-Report"><a href="#Viewing-the-Report" class="headerlink" title="Viewing the Report"></a>Viewing the Report</h2><p>Once the performance testing commands have been executed, you can find the generated report in the <code>sitespeed-result</code> folder. The report is presented in the form of an <code>index.html</code> file, which serves as the entry point to access the performance results.</p>
<p>To view the report, navigate to the <code>sitespeed-result</code> folder and open the <code>index.html</code> file in a web browser. This will launch the report and provide you with detailed information about the performance of the OpenBMC web pages.</p>
<p>The report generated by Sitespeed.io includes various metrics such as page load times, resource sizes, network requests, and more. It offers insights into the performance characteristics of the web application, allowing you to identify areas for improvement and optimization.</p>
<p>Make sure to explore the different sections of the report to gain a comprehensive understanding of the performance test results.</p>
]]></content>
      <categories>
        <category>OpenBMC</category>
      </categories>
      <tags>
        <tag>OpenBMC</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Manually Switch PCA954X I2C Mux Channels</title>
    <url>/2023/06/18/How-to-manually-switch-i2c-mux/</url>
    <content><![CDATA[<p>The PCA954X is a family of I2C multiplexers&#x2F;switches that allow you to control multiple I2C devices using a single I2C bus. In this section, we will explore how to manually switch between different channels of the PCA954X I2C mux.</p>
<h1 id="Using-the-i2c-tools"><a href="#Using-the-i2c-tools" class="headerlink" title="Using the i2c-tools"></a>Using the i2c-tools</h1><p>The i2c-tools package provides a set of command-line tools for interacting with I2C devices in Linux. We will be using three main tools: <code>i2cdetect</code>, <code>i2cdump</code>, and <code>i2cset</code>. Make sure you have the i2c-tools package installed on your system before proceeding.</p>
<h2 id="i2cdetect"><a href="#i2cdetect" class="headerlink" title="i2cdetect"></a>i2cdetect</h2><p>The <code>i2cdetect</code> tool allows you to scan the I2C bus and detect devices connected to it. It provides a grid view with addresses and corresponding symbols indicating the presence of I2C devices. Here’s an example output:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@albertlin:~<span class="comment"># i2cdetect -y 4</span></span><br><span class="line">     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f</span><br><span class="line">00:                         -- -- -- -- -- -- -- --</span><br><span class="line">10: UU -- -- -- -- -- 16 -- -- -- -- -- -- -- -- --</span><br><span class="line">20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">70: -- -- -- -- -- -- -- --</span><br></pre></td></tr></table></figure>

<p>The symbols used in the output have the following meanings:</p>
<ul>
<li>“–”: The address was probed, but no chip responded.</li>
<li>“UU”: Probing was skipped because this address is currently in use by a driver, suggesting the presence of a chip.</li>
<li>Hexadecimal address: Indicates the presence of a chip at that address.</li>
</ul>
<h2 id="i2cdump"><a href="#i2cdump" class="headerlink" title="i2cdump"></a>i2cdump</h2><p>The <code>i2cdump</code> tool allows you to read and display the content of registers on an I2C device. You need to provide the bus number and the address of the device you want to dump. Here’s an example usage:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@albertlin:~<span class="comment"># i2cdump -y 4 0x16</span></span><br><span class="line">No size specified (using byte-data access)</span><br><span class="line">     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f    0123456789abcdef</span><br><span class="line">00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">10: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">20: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">30: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">40: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">50: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">60: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">70: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">90: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">a0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">b0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">c0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">d0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">e0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br><span class="line">f0: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................</span><br></pre></td></tr></table></figure>

<p>This output displays the content of the registers starting from address 0x00.</p>
<h2 id="i2cset"><a href="#i2cset" class="headerlink" title="i2cset"></a>i2cset</h2><p>The <code>i2cset</code> tool allows you to set the content of registers on an I2C device. You need to provide the bus number, the address of the device, and the data you want to write. Here’s an example usage:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@albertlin:~<span class="comment"># i2cset -y 4 0x70 0x00 0x04</span></span><br></pre></td></tr></table></figure>

<p>In this example, we are writing the value 0x04 to register address 0x00 of the device at address 0x70 on bus 4.</p>
<h1 id="PCA954X-I2C-Mux"><a href="#PCA954X-I2C-Mux" class="headerlink" title="PCA954X I2C Mux"></a>PCA954X I2C Mux</h1><p>The PCA954X is a family of I2C multiplexers&#x2F;switches. You can find the datasheet for PCA9545A&#x2F;B&#x2F;C <a href="https://www.nxp.com/docs/en/data-sheet/PCA9545A_45B_45C.pdf">here</a>.</p>
<h2 id="Changing-DTS-through-Yocto"><a href="#Changing-DTS-through-Yocto" class="headerlink" title="Changing DTS through Yocto"></a>Changing DTS through Yocto</h2><p>If you’re using Yocto to build your Linux image, you can customize the Linux kernel configuration by following these steps:</p>
<ol>
<li><p>Open a terminal and navigate to your Yocto build directory.</p>
</li>
<li><p>Run the following command to enter the Linux kernel menuconfig:</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake -c menuconfig virtual/kernel</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Make the necessary changes in the menuconfig interface. Once you’re</li>
</ol>
<p> done, save and exit.</p>
<ol start="4">
<li>Additionally, you can generate a defconfig file by running the following command:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitbake -c savedefconfig virtual/kernel</span><br></pre></td></tr></table></figure>
<h2 id="Writing-I2C-Mux-Device-Tree-Bindings"><a href="#Writing-I2C-Mux-Device-Tree-Bindings" class="headerlink" title="Writing I2C Mux Device Tree Bindings"></a>Writing I2C Mux Device Tree Bindings</h2><p>To configure the PCA954X I2C mux in the device tree, you can refer to the following documentation:</p>
<ul>
<li><a href="https://www.kernel.org/doc/Documentation/devicetree/bindings/i2c/i2c-mux-pca954x.txt">i2c-mux-pca954x.txt</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/devicetree/bindings/i2c/i2c-mux.txt">i2c-mux.txt</a></li>
</ul>
<p>You can also check out an example of using the PCA954X I2C mux in the device tree in the <a href="https://github.com/openbmc/linux/blob/dev-5.15/arch/arm/boot/dts/aspeed-bmc-facebook-minipack.dts">aspeed-bmc-facebook-minipack.dts</a> file.</p>
<h2 id="Using-new-device-and-delete-device"><a href="#Using-new-device-and-delete-device" class="headerlink" title="Using new_device and delete_device"></a>Using <code>new_device</code> and <code>delete_device</code></h2><p>To add or remove I2C devices dynamically, you can use the <code>new_device</code> and <code>delete_device</code> attributes in the sysfs interface. Here’s an example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@albertlin:/sys/devices/platform/ahb/ahb:apb/ahb:apb:bus@1e78a000/1e78a300.i2c-bus/i2c-5/i2c-16/i2c-20<span class="comment"># ls</span></span><br><span class="line">20-0049        20-0056        delete_device  i2c-dev        mux_device     name           new_device     of_node        power          subsystem      uevent</span><br><span class="line">root@albertlin:/sys/devices/platform/ahb/ahb:apb/ahb:apb:bus@1e78a000/1e78a300.i2c-bus/i2c-5/i2c-16/i2c-20<span class="comment"># echo &quot;0x0049&quot; &gt; delete_device</span></span><br><span class="line">[  424.372524] i2c i2c-20: delete_device: Deleting device tmp75 at 0x49</span><br><span class="line">root@albertlin:/sys/devices/platform/ahb/ahb:apb/ahb:apb:bus@1e78a000/1e78a300.i2c-bus/i2c-5/i2c-16/i2c-20<span class="comment"># echo &quot;tmp75 0x49&quot; &gt; new_device</span></span><br><span class="line">[825617.903108] lm75 20-0049: hwmon2: sensor <span class="string">&#x27;tmp75&#x27;</span></span><br><span class="line">[825617.908643] i2c i2c-20: new_device: Instantiated device tmp75 at 0x49</span><br></pre></td></tr></table></figure>

<p>In the above example, <code>delete_device</code> is used to remove the device with address 0x49, and <code>new_device</code> is used to add a device named “tmp75” at address 0x49.</p>
<h2 id="Reading-Kernel-Configuration-at-Runtime"><a href="#Reading-Kernel-Configuration-at-Runtime" class="headerlink" title="Reading Kernel Configuration at Runtime"></a>Reading Kernel Configuration at Runtime</h2><p>To view the kernel configuration at runtime, you can use the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcat /proc/config.gz</span><br></pre></td></tr></table></figure>

<p>This command will display the configuration options of the running kernel.</p>
<h1 id="Switching-PCA954X-Channels"><a href="#Switching-PCA954X-Channels" class="headerlink" title="Switching PCA954X Channels"></a>Switching PCA954X Channels</h1><p>To manually switch the channel of an I2C mux, you can use the <code>i2cset</code> command with the appropriate parameters. Here’s an example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i2cset -y 5 0x70 0x01  <span class="comment"># Switch to channel 0</span></span><br><span class="line">i2cset -y 5 0x70 0x02  <span class="comment"># Switch to channel 1</span></span><br><span class="line">i2cset -y 5 0x70 0x04  <span class="comment"># Switch to channel 2</span></span><br></pre></td></tr></table></figure>

<p>In the above commands, <code>-y 5</code> specifies the I2C bus number (5 in this case), <code>0x70</code> is the address of the I2C mux device, and <code>0x01</code>, <code>0x02</code>, and <code>0x04</code> are the channel values representing channel 0, channel 1, and channel 2, respectively.</p>
<p>Here’s an example of how you can use these commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@albertlin:~<span class="comment"># i2cset -y 5 0x70 1  # Switch to channel 0</span></span><br><span class="line">root@albertlin:~<span class="comment"># i2cdetect -y 5  # Scan for devices on the I2C bus</span></span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 a b c d e f</span><br><span class="line">00: -- UU -- -- -- -- -- --</span><br><span class="line">10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">70: 70 71 -- -- -- -- -- --</span><br><span class="line">root@albertlin:~<span class="comment"># i2cset -y 5 0x71 0  # Switch to channel 1</span></span><br><span class="line">root@albertlin:~<span class="comment"># i2cdetect -y 5  # Scan for devices on the I2C bus</span></span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 a b c d e f</span><br><span class="line">00: -- UU -- -- -- -- -- --</span><br><span class="line">10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">40: -- -- -- -- -- -- -- -- -- 49 -- -- -- -- -- --</span><br><span class="line">50: -- -- -- -- -- -- 56 -- -- -- -- -- -- -- -- --</span><br><span class="line">60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">70: 70 71 -- -- -- -- -- --</span><br><span class="line">root@albertlin:~<span class="comment"># i2cset -y 5 0x71 2  # Switch to channel 2</span></span><br><span class="line">root@albertlin:~<span class="comment"># i2cdetect -y 5  # Scan for devices on the I2C bus</span></span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 a b c d e f</span><br><span class="line">00: -- UU -- -- -- -- -- --</span><br><span class="line">10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 1f</span><br><span class="line">20: -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line"></span><br><span class="line"> -- -- --</span><br><span class="line">30: -- -- 32 -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">60: -- 61 -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">70: 70 71 -- -- -- -- -- --</span><br></pre></td></tr></table></figure>

<p>In the above example, we first switch to channel 0 by using <code>i2cset -y 5 0x70 1</code>, then we scan for devices on the I2C bus using <code>i2cdetect -y 5</code>. After that, we switch to channel 1 with <code>i2cset -y 5 0x71 0</code> and perform another scan using <code>i2cdetect -y 5</code>. Finally, we switch to channel 2 with <code>i2cset -y 5 0x71 2</code> and perform a scan again.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding the Difference Between Reference and Non-Reference Members in a Class</title>
    <url>/2023/06/19/Difference-between-var-and-reference-var-in-class-member/</url>
    <content><![CDATA[<p>When declaring a member variable in a class, you have the option to declare it as a <strong>reference</strong> or as a <strong>non-reference</strong>. Understanding the difference between these two types is crucial, as it affects how they are initialized within the class. </p>
<p>Let’s dive into the dissimilarities between reference and non-reference members through an illustrative example:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span>&amp; ref_val, <span class="type">int</span> non_ref_val) : <span class="built_in">ref_val_</span>(ref_val), <span class="built_in">non_ref_val_</span>(non_ref_val) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>&amp; ref_val_;</span><br><span class="line">    <span class="type">int</span> non_ref_val_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">42</span>; </span><br><span class="line">    <span class="function">MyClass <span class="title">my_class</span><span class="params">(x, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In the given example, we define a class called <code>MyClass</code> featuring two member variables: <code>ref_val_</code>, a reference to an integer, and <code>non_ref_val_</code>, a regular integer.</p>
<p>The key disparity arises in the constructor. The <code>ref_val_</code> member is initialized in the constructor’s initialization list using the argument <code>ref_val</code>, which is a reference to an integer. This step is essential since a reference must be initialized upon declaration.</p>
<p>One practical application of using reference members is when we want to <strong>associate an external object with the class without initializing it inside the class constructor</strong>. By initializing the reference member outside the class, we can control the lifetime and initialization of the referenced object separately.</p>
<p>However, it’s crucial to ensure that the lifetime of the referenced object extends beyond the lifetime of the object holding the reference. In this case, if <code>x</code> is going to be used in <code>MyClass</code>, you should ensure that <code>x</code> remains in scope for the entire duration of <code>my_class</code>‘s lifetime. Failure to do so may lead to undefined behavior.</p>
<p>Understanding the difference between reference and non-reference members helps you make informed decisions when designing your classes and ensures the proper usage and management of references within your codebase. It provides flexibility in managing object lifetimes and improves the overall design of your C++ classes.</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding the Usage of the &amp; Operator in C++</title>
    <url>/2023/06/20/whether-and-operator-is-for-address-or-reference-in-c/</url>
    <content><![CDATA[<p>When working with the <code>&amp;</code> operator in the C language, besides bitwise, its usage is limited to taking the address of a specified variable. However, in C++, the <code>&amp;</code> operator serves two distinct purposes: taking the address of a variable and declaring a reference variable. To understand its purpose, it is crucial to consider the context in which the operator is used.</p>
<h2 id="Taking-the-Address-of-a-Variable"><a href="#Taking-the-Address-of-a-Variable" class="headerlink" title="Taking the Address of a Variable"></a>Taking the Address of a Variable</h2><p>In C++, the <code>&amp;</code> operator allows you to access the memory location where a variable is stored when used to take the address of a variable. Consider the following example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span>* px = &amp;x; <span class="comment">// &amp; used to take the address of x</span></span><br></pre></td></tr></table></figure>

<p>In this case, the <code>&amp;</code> operator is employed to obtain the address of the variable <code>x</code> and assign it to the pointer variable <code>px</code>.</p>
<h2 id="Declaring-a-Reference-Variable"><a href="#Declaring-a-Reference-Variable" class="headerlink" title="Declaring a Reference Variable"></a>Declaring a Reference Variable</h2><p>In addition to taking addresses, the <code>&amp;</code> operator can also be used to declare a reference variable. A reference provides an alternative name or alias for an existing variable. Take a look at this example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span>&amp; rx = x; <span class="comment">// &amp; used to declare the reference variable rx</span></span><br></pre></td></tr></table></figure>

<p>Here, the <code>&amp;</code> operator is utilized to declare the reference variable <code>rx</code>, which refers to the existing variable <code>x</code>. Any changes made to <code>rx</code> will directly affect the original variable <code>x</code>.</p>
<h1 id="Capturing-References-in-Lambdas"><a href="#Capturing-References-in-Lambdas" class="headerlink" title="Capturing References in Lambdas"></a>Capturing References in Lambdas</h1><p>Now, let’s explore an example and determine whether it involves a reference or an address:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">uint8_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    boost::asio::<span class="built_in">post</span>(io, [&amp;data]() &#123;</span><br><span class="line">        <span class="comment">// Use the captured &#x27;data&#x27; reference here</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Although my instinctive C brain would lean towards determining the address, in the realm of C++, this example demonstrates the concept of capturing references in lambdas. You can refer to the <a href="https://en.cppreference.com/w/cpp/language/lambda">C++ reference documentation</a> for more information.</p>
<p>Lambdas in C++ enable you to capture variables from the surrounding scope. By capturing variables by reference, you can avoid unnecessary data copies and improve performance. In this particular case, the <code>&amp;</code> operator is employed to capture the variable <code>data</code> by reference in the lambda function passed to <code>boost::asio::post</code>. The captured reference to <code>data</code> remains valid throughout the execution of the lambda function.</p>
<p>To ensure the validity of captured references throughout the asynchronous operation, it is crucial to manage their lifespan and avoid accessing invalidated references.</p>
<h1 id="Passing-the-Address-of-a-Variable-to-a-Lambda"><a href="#Passing-the-Address-of-a-Variable-to-a-Lambda" class="headerlink" title="Passing the Address of a Variable to a Lambda"></a>Passing the Address of a Variable to a Lambda</h1><p>Having covered the topic of capturing references in lambdas, the next question arises: how can we pass the address of a variable to a lambda?</p>
<p>To pass the address of a variable to a lambda, you can utilize the address-of operator <code>&amp;</code> as shown in the following example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">uint8_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    boost::asio::<span class="built_in">post</span>(io, [&amp;data]() &#123;</span><br><span class="line">        <span class="comment">// Use the address of &#x27;data&#x27; here</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;data address: &quot;</span> &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">void</span>*&gt;(&amp;data) &lt;&lt; std::endl;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this example, the lambda captures the variable <code>data</code> by reference and uses the address-of operator <code>&amp;</code> to obtain a pointer to <code>data</code> within the lambda body.</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Pointers</tag>
        <tag>References</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding Public and Private Inheritance in C++</title>
    <url>/2023/07/25/difference-of-public-syntax-of-inheritance/</url>
    <content><![CDATA[<p>In this article, we will explain the difference between the following code snippets:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">derived</span> : <span class="keyword">public</span> base</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">derived</span> : base</span><br></pre></td></tr></table></figure>

<p>When defining a derived class in C++ that inherits from a base class, you have two different syntaxes to choose from: <code>class derived : public base</code> and <code>class derived : base</code>. These syntaxes determine the type of inheritance and have a significant impact on the accessibility of the base class members in the derived class.</p>
<p>It is customary to see the <code>public</code> specifier used while inheriting a base class.</p>
<h2 id="Public-Inheritance-class-derived-public-base"><a href="#Public-Inheritance-class-derived-public-base" class="headerlink" title="Public Inheritance: class derived : public base"></a>Public Inheritance: <code>class derived : public base</code></h2><p>The syntax <code>class derived : public base</code> represents public inheritance. With public inheritance, the public members of the base class <code>base</code> retain their access levels in the derived class <code>derived</code>. Public members remain accessible as public members, protected members remain accessible as protected members, and private members remain inaccessible. This preserves the original access levels of the base class members.</p>
<h2 id="Private-Inheritance-class-derived-base"><a href="#Private-Inheritance-class-derived-base" class="headerlink" title="Private Inheritance: class derived : base"></a>Private Inheritance: <code>class derived : base</code></h2><p>The syntax <code>class derived : base</code> represents private inheritance by default. In private inheritance, both public and protected members of the base class <code>base</code> become private members in the derived class <code>derived</code>. Consequently, they are not directly accessible outside the class. Private members of the base class remain inaccessible as well.</p>
<p>In most scenarios, it is preferred to use the explicit <code>public</code> keyword (<code>class derived : public base</code>) to specify public inheritance. This ensures that the access levels of the base class members are preserved in the derived class, making the code more readable and intuitive.</p>
<p>By understanding the difference between these two inheritance types, you can make informed decisions when designing your class hierarchy in C++.</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
