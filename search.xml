<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>How to Cross Compile and Native Build on OpenBMC</title>
    <url>/2023/06/16/Cross-Compile-and-Native-Build-on-OpenBMC/</url>
    <content><![CDATA[<h1 id="Cross-Compile"><a href="#Cross-Compile" class="headerlink" title="Cross Compile"></a>Cross Compile</h1><p>To cross-compile on OpenBMC, follow these steps:</p>
<h2 id="Source-the-setup-script"><a href="#Source-the-setup-script" class="headerlink" title="Source the setup script"></a>Source the <code>setup</code> script</h2><p>Start by sourcing the <code>setup</code> script for your target hardware. You can find the script on the <a href="https://github.com/openbmc/openbmc#3-target-your-hardware">OpenBMC GitHub repository</a>. Execute the following command in your terminal:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. setup romulus</span><br></pre></td></tr></table></figure>

<h2 id="Build-the-SDK"><a href="#Build-the-SDK" class="headerlink" title="Build the SDK"></a>Build the SDK</h2><p>Next, build the Software Development Kit (SDK) using the <code>bitbake</code> command. Specify your target as an argument. For example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ bitbake -c populate_sdk obmc-phosphor-image</span><br></pre></td></tr></table></figure>

<h2 id="Install-the-SDK"><a href="#Install-the-SDK" class="headerlink" title="Install the SDK"></a>Install the SDK</h2><p>Once the SDK is built, you need to install it. Follow these steps:</p>
<ol>
<li><p>Create a folder where you want to install the SDK. For instance, let’s use <code>/usr/local/openbmc</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ sudo <span class="built_in">mkdir</span> /usr/local/openbmc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Navigate to the directory containing the SDK installation files.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ <span class="built_in">cd</span> ./tmp/deploy/sdk/</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the SDK installation script using the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ ./oecore-x86_64-armv7ahf-vfpv4d16-toolchain-nodistro.0.sh</span><br><span class="line">Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro) SDK installer version nodistro.0</span><br><span class="line">=============================================================================================</span><br></pre></td></tr></table></figure>
</li>
<li><p>The installation script will prompt you to enter the target directory for the SDK. Specify <code>/usr/local/openbmc</code> when prompted:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter target directory <span class="keyword">for</span> SDK (default: /usr/local/oecore-x86_64): /usr/local/openbmc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Confirm the installation by typing ‘y’ when asked if you want to proceed:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">You are about to install the SDK to <span class="string">&quot;/usr/local/openbmc&quot;</span>. Proceed [Y/n]? y</span><br><span class="line">Extracting SDK....................................................................................................................................<span class="keyword">done</span></span><br><span class="line">Setting it up...done</span><br><span class="line">SDK has been successfully <span class="built_in">set</span> up and is ready to be used.</span><br><span class="line">Each time you wish to use the SDK <span class="keyword">in</span> a new shell session, you need to <span class="built_in">source</span> the environment setup script e.g.</span><br></pre></td></tr></table></figure>
</li>
<li><p>The SDK will be extracted and set up in the specified directory.</p>
</li>
<li><p>Verify that the installation was successful by checking the contents of the installation directory:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ <span class="built_in">ls</span> -al /usr/local/openbmc/</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Using-the-SDK"><a href="#Using-the-SDK" class="headerlink" title="Using the SDK"></a>Using the SDK</h2><p>Before compiling your code, you need to set up the SDK environment. Execute the following command to source the environment setup script:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ . /usr/local/openbmc/environment-setup-armv7ahf-vfpv4d16-openbmc-linux-gnueabi</span><br></pre></td></tr></table></figure>

<h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><p>Now you’re ready to compile your code. Here’s an example of compiling a simple “hello” program:</p>
<ol>
<li><p>Create a directory for your project and navigate into it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ <span class="built_in">mkdir</span> hello</span><br><span class="line">albertlin@thinkbook:$ <span class="built_in">cd</span> hello</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a C source file named <code>hello.c</code> and a Meson build file named <code>meson.build</code> with the following content:</p>
<p><code>hello.c</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello OpenBMC\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>meson.build</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project(&#x27;hello&#x27;, &#x27;c&#x27;)</span><br><span class="line"></span><br><span class="line">executable(&#x27;hello&#x27;, &#x27;hello.c&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate the build files using Meson:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:hello$ meson build</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the project using Ninja:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:hello$ ninja -C build</span><br></pre></td></tr></table></figure>
</li>
<li><p>Once the build is complete, you can find the compiled binary in the <code>build</code> directory. You can copy it to your OpenBMC target for execution using the <code>scp</code> command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:hello$ scp build/hello root@192.168.0.196:/tmp</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Run-built-program-in-BMC"><a href="#Run-built-program-in-BMC" class="headerlink" title="Run built program in BMC"></a>Run built program in BMC</h2><p>To execute the binary on your BMC target, follow these steps:</p>
<ol>
<li><p>Connect to your BMC target using SSH.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.0.196</span><br></pre></td></tr></table></figure>
</li>
<li><p>Navigate to the directory where you copied the binary.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@romulus:/tmp<span class="comment"># cd /tmp</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the binary.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@romulus:/tmp<span class="comment"># ./hello</span></span><br><span class="line">Hello OpenBMC</span><br></pre></td></tr></table></figure></li>
</ol>
<p>That’s it! You have successfully cross-compiled and executed a program on OpenBMC.</p>
<h1 id="Native-Build"><a href="#Native-Build" class="headerlink" title="Native Build"></a>Native Build</h1><h2 id="Source-the-setup-script-1"><a href="#Source-the-setup-script-1" class="headerlink" title="Source the setup script"></a>Source the <code>setup</code> script</h2><p>Start by sourcing the <code>setup</code> script for your target hardware. You can find the script on the <a href="https://github.com/openbmc/openbmc#3-target-your-hardware">OpenBMC GitHub repository</a>. Execute the following command in your terminal:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. setup romulus</span><br></pre></td></tr></table></figure>
<h2 id="Environment-Setup-and-Checking"><a href="#Environment-Setup-and-Checking" class="headerlink" title="Environment Setup and Checking"></a>Environment Setup and Checking</h2><ol>
<li>Check if the required packages listed by <a href="https://github.com/openbmc/sdbusplus">sdbusplus</a> are installed:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git meson libtool pkg-config g++ libsystemd-dev \</span><br><span class="line">    python3 python3-pip python3-yaml python3-mako python3-inflection</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>Check the Boost version used by OpenBMC:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ bitbake-layers show-recipes | grep -i meson -A 1</span><br><span class="line">boost:</span><br><span class="line">  boost                 1.82.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>Ensure that the Boost version matches what OpenBMC currently use.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:boost$ wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz</span><br><span class="line">--2023-06-17 03:30:56--</span><br><span class="line">...</span><br><span class="line">2023-06-17 03:31:52 (2.52 MB/s) - ‘boost_1_82_0.tar.gz’ saved [142580547/142580547]</span><br><span class="line">albertlin@albertlin:boost$ <span class="built_in">ls</span></span><br><span class="line">boost_1_82_0.tar.gz</span><br><span class="line"></span><br><span class="line">albertlin@albertlin:boost_1_82_0$ ./bootstrap.sh --prefix=/usr</span><br><span class="line">Building B2 engine..</span><br><span class="line">...</span><br><span class="line">Further information:</span><br><span class="line"></span><br><span class="line">   - Command line <span class="built_in">help</span>:</span><br><span class="line">     ./b2 --<span class="built_in">help</span></span><br><span class="line">     </span><br><span class="line">   - Getting started guide: </span><br><span class="line">     http://www.boost.org/more/getting_started/unix-variants.html</span><br><span class="line">     </span><br><span class="line">   - B2 documentation:</span><br><span class="line">     http://www.boost.org/build/</span><br><span class="line"></span><br><span class="line">albertlin@albertlin:boost_1_82_0$ sudo ./b2 --install</span><br><span class="line">Performing configuration checks</span><br><span class="line">...</span><br><span class="line">The following directory should be added to linker library paths:</span><br><span class="line"></span><br><span class="line">    /home/albertlin/hypnoslin/openbmc/boost/boost_1_82_0/stage/lib</span><br><span class="line">albertlin@albertlin:sdbusplus$ <span class="built_in">cat</span> /usr/include/boost/version.hpp | grep <span class="string">&quot;BOOST_LIB_VERSION&quot;</span></span><br><span class="line">//  BOOST_LIB_VERSION must be defined to be the same as BOOST_VERSION</span><br><span class="line"><span class="comment">#define BOOST_LIB_VERSION &quot;1_82&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Check the Meson version used by OpenBMC:</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ bitbake-layers show-recipes | grep -i meson -A 1</span><br><span class="line">meson:</span><br><span class="line">  meta                 1.0.1</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Ensure that the Meson version matches what OpenBMC currently uses. It’s recommended to have an upgraded version:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:sdbusplus$ meson -v</span><br><span class="line">0.61.2</span><br><span class="line">albertlin@albertlin:sdbusplus$ python --version</span><br><span class="line">Python 3.10.6</span><br><span class="line">albertlin@albertlin:sdbusplus$ python -m pip install meson</span><br><span class="line">Defaulting to user installation because normal site-packages is not writeable</span><br><span class="line">Collecting meson</span><br><span class="line">  Downloading meson-1.1.1-py3-none-any.whl (918 kB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 918.4/918.4 KB 2.9 MB/s eta 0:00:00</span><br><span class="line">Installing collected packages: meson</span><br><span class="line">Successfully installed meson-1.1.1</span><br><span class="line">albertlin@thinkbook:~$ meson -v</span><br><span class="line">1.1.1</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>If there are missing packages reported by Meson while building, install them:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y libi2c-dev libarchive-dev libfmt-dev libsystemd-dev</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>Verify that the GCC&#x2F;G++ version matches what OpenBMC currently uses.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ bitbake-layers show-recipes | grep gcc -A 1</span><br><span class="line">gcc:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-cross-arm:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-cross-canadian-arm:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-crosssdk-x86_64-oesdk-linux:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-runtime:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-sanitizers:</span><br><span class="line">meta 12.2.0</span><br><span class="line">gcc-source-12.2.0:</span><br><span class="line">meta 12.2.0</span><br><span class="line">–</span><br><span class="line">libgcc:</span><br><span class="line">meta 12.2.0</span><br><span class="line">libgcc-initial:</span><br><span class="line">meta 12.2.0</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@thinkbook:$ gcc -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">...</span><br><span class="line">gcc version 11.3.0 (Ubuntu 11.3.0-1ubuntu1~22.04.1)</span><br></pre></td></tr></table></figure></li>
<li>Ensure that the g++ version matches what OpenBMC currently uses.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:~$ g++ -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=g++</span><br><span class="line">...</span><br><span class="line">gcc version 9.5.0 (Ubuntu 9.5.0-1ubuntu1~22.04) </span><br><span class="line">albertlin@albertlin:~$ sudo apt install g++-12</span><br><span class="line">Reading package lists... Done</span><br><span class="line">...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.10.2-1) ... </span><br><span class="line">albertlin@albertlin:~$ <span class="built_in">ls</span> -al /usr/bin/g++</span><br><span class="line">lrwxrwxrwx 1 root root 5 Mar 20  2020 /usr/bin/g++ -&gt; g++-9</span><br><span class="line">albertlin@albertlin:~$ sudo <span class="built_in">rm</span> /usr/bin/g++</span><br><span class="line">albertlin@albertlin:~$ sudo <span class="built_in">ln</span> /usr/bin/g++-12 /usr/bin/g++</span><br><span class="line">albertlin@albertlin:~$ g++ -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=g++</span><br><span class="line">...</span><br><span class="line">gcc version 12.1.0 (Ubuntu 12.1.0-2ubuntu1~22.04)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Building-and-Executing"><a href="#Building-and-Executing" class="headerlink" title="Building and Executing"></a>Building and Executing</h2><ol>
<li><p>Clone the sdbusplus repository. Run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openbmc/sdbusplus.git</span><br><span class="line"><span class="built_in">cd</span> sdbusplus</span><br></pre></td></tr></table></figure>
</li>
<li><p>Configure the build using Meson. Run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:sdbusplus$ meson build -Dtests=disabled -Dexamples=disabled</span><br><span class="line">The Meson build system</span><br><span class="line">Version: 1.1.1</span><br><span class="line">Source <span class="built_in">dir</span>: /home/albertlin/hypnoslin/openbmc/sdbusplus</span><br><span class="line">Build <span class="built_in">dir</span>: /home/albertlin/hypnoslin/openbmc/sdbusplus/build</span><br><span class="line">Build <span class="built_in">type</span>: native build</span><br><span class="line">Project name: sdbusplus</span><br><span class="line">Project version: 1.0.0</span><br><span class="line">C compiler <span class="keyword">for</span> the host machine: cc (gcc 11.3.0 <span class="string">&quot;cc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0&quot;</span>)</span><br><span class="line">C linker <span class="keyword">for</span> the host machine: cc ld.bfd 2.38</span><br><span class="line">C++ compiler <span class="keyword">for</span> the host machine: c++ (gcc 12.1.0 <span class="string">&quot;c++ (Ubuntu 12.1.0-2ubuntu1~22.04) 12.1.0&quot;</span>)</span><br><span class="line">C++ linker <span class="keyword">for</span> the host machine: c++ ld.bfd 2.38</span><br><span class="line">Host machine cpu family: x86_64</span><br><span class="line">Host machine cpu: x86_64</span><br><span class="line">Found pkg-config: /usr/bin/pkg-config (0.29.2)</span><br><span class="line">Run-time dependency libsystemd found: YES 249</span><br><span class="line">Program python3 (inflection, yaml, mako) found: YES (/usr/bin/python3) modules: inflection, yaml, mako</span><br><span class="line">Run-time dependency Boost found: YES 1.82.0 (/usr/include)</span><br><span class="line">Program sdbus++ found: YES (/home/albertlin/hypnoslin/openbmc/sdbusplus/tools/sdbus++)</span><br><span class="line">Program sdbus++ found: YES (overridden)</span><br><span class="line">Program sdbus++-gen-meson found: YES (/home/albertlin/hypnoslin/openbmc/sdbusplus/tools/sdbus++-gen-meson)</span><br><span class="line">Program sdbus++-gen-meson found: YES (overridden)</span><br><span class="line">Build targets <span class="keyword">in</span> project: 1</span><br><span class="line"></span><br><span class="line">sdbusplus 1.0.0</span><br><span class="line"></span><br><span class="line">  User defined options</span><br><span class="line">    examples: disabled</span><br><span class="line">    tests   : disabled</span><br><span class="line"></span><br><span class="line">Found ninja-1.10.1 at /usr/bin/ninja</span><br><span class="line">WARNING: Running the setup <span class="built_in">command</span> as `meson [options]` instead of `meson setup [options]` is ambiguous and deprecated.</span><br></pre></td></tr></table></figure></li>
<li><p>Build the project using Ninja. Run the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">albertlin@albertlin:sdbusplus$ ninja -C build</span><br><span class="line">ninja: Entering directory `build<span class="string">&#x27;</span></span><br><span class="line"><span class="string">[11/11] Linking target libsdbusplus.so.1.0.0</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>OpenBMC</category>
      </categories>
      <tags>
        <tag>OpenBMC</tag>
      </tags>
  </entry>
</search>
